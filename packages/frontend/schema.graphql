scalar BigInt

type Query {
  address(addressOrEnsName: String!): Address
  wrappedDelegates(where: WrappedDelegatesWhere, orderBy: WrappedDelegatesOrder! = mostRelevant, first: Int!, after: String): WrappedDelegatesConnection!
  metrics: OverallMetrics!
}

type Address {
  resolvedName: ResolvedName!
  account: Account
  wrappedDelegate: WrappedDelegate!
  isContract: Boolean!
}

type ResolvedName {
  address: ID!
  name: String
}

type WrappedDelegate {
  id: ID!
  address: Address!
  statement: DelegateStatement
  delegate: Delegate
}

type Delegate {
  id: ID!
  totalVotingPower: BigInt!
  tokenHoldersRepresented: [Account!]!
}

type Account {
  address: Address!
  amountOwned: BigInt!
  delegatingTo: Delegate!
}

type DelegateStatement {
  statement: String!
  summary: String
  topIssues: [TopIssue!]!
  mostValuableProposals: [Proposal!]!
  leastValuableProposals: [Proposal!]!
  twitter: String!
  discord: String!
  openToSponsoringProposals: Boolean
}

type TopIssue {
  type: String!
  value: String!
}

enum WrappedDelegatesWhere {
  withStatement
  seekingDelegation
}

enum WrappedDelegatesOrder {
  mostRelevant
  mostVotingPower
  mostActive
}

type WrappedDelegatesConnection {
  pageInfo: PageInfo!
  edges: [WrappedDelegatesEdge!]!
}

type WrappedDelegatesEdge {
  node: WrappedDelegate!
  cursor: String!
}

type PageInfo {
  count: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type Proposal {
  id: ID!
  number: Int!
  title: String!
  totalVotes: BigInt!
}

type OverallMetrics {
  delegatedSupply: BigInt!
  totalSupply: BigInt!
  quorumNumerator: BigInt!
  quorumDenominator: BigInt!
  proposalThreshold: BigInt!
  averageVoterTurnout: Float!
}

type Mutation {
  createNewDelegateStatement(data: CreateNewDelegateStatementData): WrappedDelegate!
}

input CreateNewDelegateStatementData {
  statement: ValueWithSignature!
  email: ValueWithSignature
}

input ValueWithSignature {
  signerAddress: String!
  value: String!
  signature: String!
}
