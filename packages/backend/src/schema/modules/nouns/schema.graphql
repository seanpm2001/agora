type Noun {
  id: ID!
  tokenId: BigInt!
  accessory: Int!
  background: Int!
  body: Int!
  glasses: Int!
  head: Int!
}

type DelegateSnapshot {
  nounsRepresented: [Noun!]!
}

type Delegate {
  nounsOwned: [Noun!]!
  nounsRepresented: [Noun!]!
}

type Query {
  metrics: Metrics!

  proposals(
    first: Int!
    after: String
    orderBy: ProposalOrder! = byStartTimeDesc
    where: ProposalWhere
  ): ProposalsConnection!

  nonVotedProposals(addressOrEnsName: String!): [Proposal!]!
}

enum ProposalOrder {
  byStartTimeDesc
}

enum ProposalWhere {
  statusActive
}

type ProposalsConnection {
  pageInfo: PageInfo!
  edges: [ProposalsEdge!]!
}

type ProposalsEdge {
  node: Proposal!
  cursor: String!
}

interface Proposal {
  id: ID!
}

type OnChainProposalType implements Proposal {
  id: ID!
  onChainProposal: OnChainProposal!
}

type PropHouseProposalType implements Proposal {
  id: ID!
  propHouseProposal: PropHouseAuction!
}

type Metrics {
  delegatedSupply: TokenAmount!
  totalSupply: TokenAmount!

  # Count of unique addresses with a non-zero delegation power.
  delegatesCount: Int!

  # Count of unique addresses with non-zero ownership.
  ownersCount: Int!

  quorumFloor: VotingPower!
  quorumCeiling: VotingPower!
  proposalThreshold: VotingPower!

  recentVoterTurnoutBps: Int!
}
